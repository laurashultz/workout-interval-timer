{"version":3,"sources":["index.js"],"names":["App","TitleBlock","title","Timer","React","Component","props","class","className","data-glyph","aria-hidden","state","minutes","seconds","breakTime","breakLength","sessionLength","runtime","pause","setDefault","bind","incHandle","decHandle","toggleBreak","togglePause","countDown","this","counting","setInterval","clearInterval","setState","audioBeep","document","getElementById","currentTime","event","length","target","id","mins","play","time","mappedTime","map","x","toString","ControlModule","type","disableBtnsBreak","TimerControl","paused","reset","src","onClick","toUpperCase","IncrementControl","disabled","ReactDOM","render"],"mappings":"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","file":"static/js/main.a32c2b58.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './open-iconic.css';\n\nconst projTitle = 'Workout Interval Timer';\nconst audioURL = 'https://sampleswap.org/samples-ghost/SOUND%20EFFECTS%20and%20NOISES/VIDEO%20GAMES/zelda/294[kb]zelda-get.aif.mp3';\n\n  /*App holds all the child function and class components*/\n  class App extends React.Component {\n    render (){\n      return (\n        <div>\n        <TitleBlock title={projTitle} />\n        <Timer />\n        </div>\n    );\n    }\n  }\n\n/*Simple- TitleBlock is just the title block that takes a string for props and returns a cool title w/ some icons */\n function TitleBlock(props){\n    return(\n    <h1 class=\"centerText\"><span className=\"oi\" data-glyph=\"pulse\" aria-hidden=\"true\"></span> \n    {props.title}\n    <span className=\"oi\" data-glyph=\"pulse\" aria-hidden=\"true\"></span></h1>\n    );\n }\n\nclass Timer extends React.Component{ \n  constructor(props){\n    super(props);\n    this.state = ({\n      minutes: 25,\n      seconds: 0,\n      breakTime: false,\n      breakLength: 5,\n      sessionLength: 25,\n      runtime: false,\n      pause: true\n    });\n    this.setDefault = this.setDefault.bind(this);\n    this.incHandle = this.incHandle.bind(this);\n    this.decHandle = this.decHandle.bind(this);\n    this.toggleBreak = this.toggleBreak.bind(this);\n    this.togglePause = this.togglePause.bind(this);\n    this.countDown = this.countDown.bind(this);\n  }\n  /*when component is mounted, the countDown method starts and cycles every 1000ms (1 sec)*/\n  componentDidMount(){\n    this.counting = setInterval(this.countDown, 1000);\n  }\n  /*when component dismounts, the intervals are cleared */\n  componentWillUnmount() {\n    clearInterval(this.state.seconds);\n    clearInterval(this.state.minutes);\n  }\n  setDefault(){\n    this.setState({\n      minutes: 25,\n      seconds: 0,\n      breakTime: false,\n      breakLength: 5,\n      sessionLength: 25,\n      runtime: false,\n      pause: true\n    });\n    var audioBeep = document.getElementById('beep');\n    audioBeep.pause();\n    audioBeep.currentTime = 0;\n  }\n  /*incHandle handles incrementing the session and break lengths when the inc buttons are clicked*/\n  incHandle(event){\n    let length;\n    switch(event.target.id){\n      case 'session-increment':\n        length = this.state.sessionLength+1;\n        if(length<=60){\n          if(this.state.runtime===false){this.setState({sessionLength: length, minutes: length});\n          }else{this.setState({sessionLength: length})}\n        } else{\n        return;\n        }\n        break;\n      case 'break-increment':\n        length = this.state.breakLength+1;\n        if(length<=60){this.setState({breakLength: length})\n        }else{return}\n        break;\n      default:\n        break;\n    }\n\n  }\n  /*decHandle handles decrementing the session and break lengths when the inc buttons are clicked*/\n  decHandle(event){\n    let length;\n    switch(event.target.id){\n      case 'session-decrement':\n        length = this.state.sessionLength-1;\n        if(this.state.sessionLength-1>0){\n          if(this.state.runtime===false){\n            this.setState({sessionLength: length, minutes: length});\n            }else{this.setState({sessionLength: length})}\n        }else{return}\n        break;\n      case 'break-decrement':\n        length = this.state.breakLength-1;\n        if(length>0){\n          this.setState({breakLength: length});\n        }else{return}\n        break;\n      default:\n        break;\n    }\n  }\n  /*toggleBreak is called after the timer completes a countdown and switches between this.state.breakTime = true/false*/\n  toggleBreak(){\n    if(this.state.breakTime===false){\n      var mins = this.state.breakLength;\n    } else {\n      mins = this.state.sessionLength;\n    }\n    this.setState(({breakTime}) => ({breakTime: !breakTime, runtime: false, minutes: mins}));\n    var audioBeep = document.getElementById('beep');\n    audioBeep.play();\n  }\n  togglePause(){\n    this.setState(({pause})=>({pause: !pause}));\n  }\n/*The countDown method is the primary logic for this project */\n  countDown(){\n    if(!this.state.runtime){\n      if(!this.state.pause){\n        this.setState({runtime: true});\n      } \n      }\n\n    if(!this.state.pause){\n      var time = [this.state.minutes, this.state.seconds]; \n      if(this.state.seconds===0){\n        if(this.state.minutes===0){\n          this.toggleBreak(); //toggle break after the 00:00 time has been set\n          return;\n        } \n        if(this.state.minutes>0){\n          time[0]= this.state.minutes-1;\n          time[1]= 59;\n        } \n      }else if(this.state.seconds>0){\n        time[1] = this.state.seconds-1;\n      }\n        this.setState({\n          minutes: time[0],\n          seconds: time[1]\n        });\n      \n    }\n\n\n  }\n  render(){\n    var timeKeep = [this.state.minutes, this.state.seconds];\n    var mappedTime = timeKeep.map((x)=> {if(x<10){return '0'+x.toString()}else{return x.toString()}}); //formats the time to be displayed\n    return (\n      <div className=\"timerBody\">\n        <div className=\"centerText\" id=\"timer-label\">{this.state.breakTime ? 'Break length remaining:':'Session length remaining:'}</div> \n        <div className=\"centerText\" id=\"time-left\">{mappedTime[0]+':'+mappedTime[1]}</div>\n        <ControlModule type={\"session\"} length={this.state.sessionLength} incHandle={this.incHandle} decHandle={this.decHandle} disableBtnsBreak={false} breakTime={this.state.breakTime} runtime={this.state.runtime}/>\n        <ControlModule type={\"break\"} length={this.state.breakLength} incHandle={this.incHandle} decHandle={this.decHandle} disableBtnsBreak={true} breakTime={this.state.breakTime} runtime={this.state.runtime} />\n        <TimerControl paused={this.state.pause} pause={this.togglePause} reset={this.setDefault}/>\n        <audio className=\"clip\" type=\"audio/mp3\" id='beep' src={audioURL}></audio>\n      </div>\n\n    );\n  }\n}\n\n/*the only function for TimerControl is to hold buttons that call togglePause and setDefault when they are clicked. */\nfunction TimerControl(props){\n  return(\n    <div className=\"centerObjects\">\n      <button id=\"start_stop\" onClick={props.pause}> \n        {props.paused \n          ?<span className=\"oi\" data-glyph=\"media-play\" title=\"resume\" aria-hidden=\"true\"></span>\n          :<span className=\"oi\" data-glyph=\"media-pause\" title=\"pause\" aria-hidden=\"true\"></span>}\n      </button> \n      <button id=\"reset\" onClick={props.reset}><span className=\"oi\" data-glyph=\"loop-circular\" title=\"Reset\" aria-hidden=\"true\"></span></button>\n    </div>\n\n  );\n}\n\n/*ControlModule is used to generate each section-- BREAK LENGTH and SESSION LENGTH \nwith the incrementors that control how long the session vs. break is*/\nfunction ControlModule(props){\n  return (\n    <div className=\"\" id={props.type + '-label'}>\n    <h2>{props.type.toUpperCase()} LENGTH:</h2>\n    <p className=\"centerText\" id={props.type + '-length'}>{props.length}</p>\n    <IncrementControl incHandle={props.incHandle} decHandle={props.decHandle} type={props.type} disableBtnsBreak={props.disableBtnsBreak} breakTime={props.breakTime} runtime={props.runtime} />\n    </div>\n  );\n}\n/*IncrementControl is used in the ControlModule to generate the buttons to control the break/session times*/\nfunction IncrementControl(props){\n  return (\n    <div className=\"incrementControl\">\n      <button id={props.type + \"-increment\"} onClick={props.incHandle} disabled={props.runtime && (props.breakTime === props.disableBtnsBreak)?true:false } ><span className=\"oi\" data-glyph=\"caret-top\" title={props.type + \" increment\"}  aria-hidden=\"true\"></span></button>\n      <button id={props.type + \"-decrement\"} onClick={props.decHandle}  disabled={props.runtime && (props.breakTime === props.disableBtnsBreak)?true:false } ><span className=\"oi\" data-glyph=\"caret-bottom\" title={props.type + \" decrement\"}  aria-hidden=\"true\"></span></button>\n    </div>\n  );\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n\n\n"],"sourceRoot":""}